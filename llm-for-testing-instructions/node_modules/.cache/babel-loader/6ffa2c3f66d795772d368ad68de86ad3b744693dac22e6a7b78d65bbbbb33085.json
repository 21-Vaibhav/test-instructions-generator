{"ast":null,"code":"var _jsxFileName = \"C:\\\\myracle-task\\\\llm-for-testing-instructions\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport ReactMarkdown from \"react-markdown\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [answer, setAnswer] = useState(\"\");\n  const [generatingAnswer, setGeneratingAnswer] = useState(false);\n\n  // Function to upload image and extract text\n  async function extractTextFromImage(imageFile) {\n    const formData = new FormData();\n    formData.append(\"file\", imageFile);\n    try {\n      var _extractResponse$data, _extractResponse$data2, _extractResponse$data3;\n      // Upload the image and get the URI\n      const uploadResponse = await axios.post(`https://generativelanguage.googleapis.com/v1beta/files:upload?key=${process.env.REACT_APP_API_KEY}`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      const imageUri = uploadResponse.data.file.uri;\n\n      // Now extract text from the image using the extracted image URI\n      const extractResponse = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${process.env.REACT_APP_API_KEY}`, {\n        prompt: \"Extract the text in the image verbatim\",\n        fileData: {\n          fileUri: imageUri,\n          mimeType: \"image/jpeg\"\n        }\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const extractedText = ((_extractResponse$data = extractResponse.data.candidates[0]) === null || _extractResponse$data === void 0 ? void 0 : (_extractResponse$data2 = _extractResponse$data.content) === null || _extractResponse$data2 === void 0 ? void 0 : (_extractResponse$data3 = _extractResponse$data2.parts[0]) === null || _extractResponse$data3 === void 0 ? void 0 : _extractResponse$data3.text) || \"No text extracted\";\n      return extractedText;\n    } catch (error) {\n      console.error(\"Text extraction failed:\", error);\n      return null;\n    }\n  }\n\n  // Function to handle the form submission and generate an answer\n  async function generateAnswer(e) {\n    e.preventDefault();\n    setGeneratingAnswer(true);\n    setAnswer(\"Loading your answer... \\n It might take up to 10 seconds\");\n    try {\n      let text = question;\n      if (image) {\n        // If an image is uploaded, extract text from the image\n        text = await extractTextFromImage(image);\n      }\n\n      // Generate answer based on extracted text and prompt\n      const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.REACT_APP_API_KEY}`, {\n        contents: [{\n          parts: [{\n            text: `Write test instructions for the following text: ${text}`\n          }]\n        }]\n      });\n      setAnswer(response.data.candidates[0].content.parts[0].text);\n    } catch (error) {\n      console.error(error);\n      setAnswer(\"Sorry - Something went wrong. Please try again!\");\n    }\n    setGeneratingAnswer(false);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-blue-50 to-blue-100 h-screen p-3 flex flex-col justify-center items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: generateAnswer,\n        className: \"w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg shadow-lg bg-white py-6 px-4 transition-all duration-500 transform hover:scale-105\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold text-blue-500 mb-4 animate-bounce\",\n          children: \"Chat AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"border border-gray-300 rounded w-full my-2 min-h-fit p-3 transition-all duration-300 focus:border-blue-400 focus:shadow-lg\",\n          value: question,\n          onChange: e => setQuestion(e.target.value),\n          placeholder: \"Ask anything or leave blank if using an image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"my-2\",\n          accept: \"image/*\",\n          onChange: e => setImage(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: `bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition-all duration-300 ${generatingAnswer ? \"opacity-50 cursor-not-allowed\" : \"\"}`,\n          disabled: generatingAnswer,\n          children: \"Generate answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg bg-white my-4 shadow-lg transition-all duration-500 transform hover:scale-105\",\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          className: \"p-4\",\n          children: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"HZntgBUKvHntBk3GihBAqAdgkNg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","axios","ReactMarkdown","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","question","setQuestion","image","setImage","answer","setAnswer","generatingAnswer","setGeneratingAnswer","extractTextFromImage","imageFile","formData","FormData","append","_extractResponse$data","_extractResponse$data2","_extractResponse$data3","uploadResponse","post","process","env","REACT_APP_API_KEY","headers","imageUri","data","file","uri","extractResponse","prompt","fileData","fileUri","mimeType","extractedText","candidates","content","parts","text","error","console","generateAnswer","e","preventDefault","response","contents","children","className","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","type","accept","files","disabled","_c","$RefreshReg$"],"sources":["C:/myracle-task/llm-for-testing-instructions/src/App.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport ReactMarkdown from \"react-markdown\";\n\nfunction App() {\n  const [question, setQuestion] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [answer, setAnswer] = useState(\"\");\n  const [generatingAnswer, setGeneratingAnswer] = useState(false);\n\n  // Function to upload image and extract text\n  async function extractTextFromImage(imageFile) {\n    const formData = new FormData();\n    formData.append(\"file\", imageFile);\n\n    try {\n      // Upload the image and get the URI\n      const uploadResponse = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/files:upload?key=${process.env.REACT_APP_API_KEY}`,\n        formData,\n        { headers: { \"Content-Type\": \"multipart/form-data\" } }\n      );\n\n      const imageUri = uploadResponse.data.file.uri;\n\n      // Now extract text from the image using the extracted image URI\n      const extractResponse = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${process.env.REACT_APP_API_KEY}`,\n        {\n          prompt: \"Extract the text in the image verbatim\",\n          fileData: { fileUri: imageUri, mimeType: \"image/jpeg\" }\n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n\n      const extractedText = extractResponse.data.candidates[0]?.content?.parts[0]?.text || \"No text extracted\";\n      return extractedText;\n\n    } catch (error) {\n      console.error(\"Text extraction failed:\", error);\n      return null;\n    }\n  }\n\n  // Function to handle the form submission and generate an answer\n  async function generateAnswer(e) {\n    e.preventDefault();\n    setGeneratingAnswer(true);\n    setAnswer(\"Loading your answer... \\n It might take up to 10 seconds\");\n\n    try {\n      let text = question;\n      if (image) {\n        // If an image is uploaded, extract text from the image\n        text = await extractTextFromImage(image);\n      }\n\n      // Generate answer based on extracted text and prompt\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.REACT_APP_API_KEY}`,\n        {\n          contents: [{ parts: [{ text: `Write test instructions for the following text: ${text}` }] }]\n        }\n      );\n\n      setAnswer(response.data.candidates[0].content.parts[0].text);\n    } catch (error) {\n      console.error(error);\n      setAnswer(\"Sorry - Something went wrong. Please try again!\");\n    }\n\n    setGeneratingAnswer(false);\n  }\n\n  return (\n    <>\n      <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 h-screen p-3 flex flex-col justify-center items-center\">\n        <form\n          onSubmit={generateAnswer}\n          className=\"w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg shadow-lg bg-white py-6 px-4 transition-all duration-500 transform hover:scale-105\"\n        >\n          <h1 className=\"text-4xl font-bold text-blue-500 mb-4 animate-bounce\">\n            Chat AI\n          </h1>\n          <textarea\n            className=\"border border-gray-300 rounded w-full my-2 min-h-fit p-3 transition-all duration-300 focus:border-blue-400 focus:shadow-lg\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            placeholder=\"Ask anything or leave blank if using an image\"\n          ></textarea>\n\n          <input\n            type=\"file\"\n            className=\"my-2\"\n            accept=\"image/*\"\n            onChange={(e) => setImage(e.target.files[0])}\n          />\n\n          <button\n            type=\"submit\"\n            className={`bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition-all duration-300 ${\n              generatingAnswer ? \"opacity-50 cursor-not-allowed\" : \"\"\n            }`}\n            disabled={generatingAnswer}\n          >\n            Generate answer\n          </button>\n        </form>\n\n        <div className=\"w-full md:w-2/3 lg:w-1/2 xl:w-1/3 text-center rounded-lg bg-white my-4 shadow-lg transition-all duration-500 transform hover:scale-105\">\n          <ReactMarkdown className=\"p-4\">{answer}</ReactMarkdown>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}